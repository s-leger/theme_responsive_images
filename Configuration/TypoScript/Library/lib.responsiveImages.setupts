############################################
###  theme_responsive_images extension   ###
###   automagic responsive image size    ###
###                                      ###
### note: 4 breakpoints -> 5 image size  ###
###   im  bp  im bp  im bp  im bp   im   ###
### 0 xxs 480 xs 768 sm 992 md 1200 lg   ###
############################################

### see:
### http://responsivedesign.is/articles/why-you-dont-need-device-specific-breakpoints

### NOTE:
### on server without mime type
### detection and noScaleUp = 1
### the width/height of images when not resized are 0
### https://forge.typo3.org/issues/46020

############################################
### compute image width for each breakpoint
############################################

# image width
lib.responsiveImages.width = COA
lib.responsiveImages.width {
    
    5 = TEXT
    5.value = ((
    
    ## avaliable width
    10 = TEXT
    10 {
        data = register:width_lg
        
        # available width for image above text
        # factor set by typoscript variable
        # changing this dosent require any change on css 
        
        stdWrap  {
            wrap {
                cObject = TEXT
                cObject {
                    value = (|)/{$plugin.lef_bootstrap_theme.images.divideImageAboveTextWidth}
                    stdWrap.if {
                        value = 17,18,25,26
                        isInList.field = imageorient
                    }
                }
            }
            outerWrap = (|)
        }
    }
    
    ## multi columns layouts
    20 = COA
    20 {
        
        ## remove gutter width
        10 = TEXT
        10.value = {$plugin.lef_bootstrap_theme.gutter}
        
        15 = TEXT
        15.value = +(
        
        ## gutters between multiple columns only when image count > 1
        20 = TEXT
        20.value = {$styles.content.imgtext.colSpace}
        
        25 = TEXT
        25.value =  *
        
        30 = TEXT
        30{
            value = 0
            override = ({field:imagecols}-1)
            override{
                insertData = 1
                if {
                    value = 1
                    isGreaterThan.data = register:imageCount
                }
            }
        }
        
        35 = TEXT
        35.value = )
        stdWrap.wrap = -(|)
    }
    
    30 = TEXT
    30.value = )
    
    # columns width for multicolumn content
    40 = TEXT
    40 {
        # divide by the number of columns
        value = /{field:imagecols}
        stdWrap.if {
            value = 1
            isGreaterThan.data = register:imageCount
        }
        insertData = 1
    }
    
    50 = TEXT
    50.value = )
    
    # image border thick and space
    60 = TEXT
    60 {
        value = -(({$styles.content.imgtext.borderThick}+{$styles.content.imgtext.borderSpace})*2)
        stdWrap.if.isTrue.field = imageborder
    }
    
}


##################################
## SrcSet media query helper    ##
##################################

# SrcSet helper
lib.responsiveImages.srcset = COA
lib.responsiveImages.srcset{
    # media query min width
    10 = TEXT
    10.stdWrap.wrap = (min-width:|px)
    
    15 = TEXT
    15{
        value = AND
        stdWrap.noTrimWrap = | | |
        if.isTrue = 1
    }
    # media query max width
    20 = COA
    20{
        10 = TEXT
        10.prioriCalc = intval
        stdWrap.wrap = (max-width:|px)
    }
    # media query pixeldensity
    25 = TEXT
    25.stdWrap.noTrimWrap = | ||
    
    # viewport width
    30 = COA
    30{
        10 = TEXT
        10{
            value =
            stdWrap.insertData = 1
            prioriCalc = intval
        }
        stdWrap{
            noTrimWrap = | |vw|
        }
    }
    40 = TEXT
    40.value = ,
}






###################################
###      RESPONSIVE IMAGES      ###
###  adaptive width of pics     ###
###  including nested layouts   ###
###################################

tt_content.image.20.1 {
    
    layout {
        srcset {
            element = <img ###PARAMS### srcset="###SOURCECOLLECTION###" src="###SRC###"###ALTPARAMS######SELFCLOSINGTAGSLASH###>
            source = |*|###SRC### ###WIDTH###w,|*|###SRC### ###WIDTH###w
        }
        picture {
            element = <picture>###SOURCECOLLECTION###<img src="###SRC###"###PARAMS######ALTPARAMS######SELFCLOSINGTAGSLASH###></picture>
            source = <source srcset="###SRC###" media="###MEDIAQUERY###"###SELFCLOSINGTAGSLASH###>
            ## removed width/height from source due to incorrect setting with retina 
            ## width="###WIDTH###" height="###HEIGHT###"
        }
        lazyload {
            element (
            <img src="typo3conf/ext/lef_bootstrap_theme/Resources/Public/Images/ajax-loader.gif" ###SOURCECOLLECTION######PARAMS######ALTPARAMS######SELFCLOSINGTAGSLASH###>
            <noscript>
            <img src="###SRC###"###PARAMS######ALTPARAMS###/>
            </noscript>
            )
            source = data-###DATAKEY###="###SRC###"
            source.noTrimWrap = ; ;;
            source.noTrimWrap.splitChar = ;
        }
    }
    
    layoutKey = {$styles.content.imgtext.layoutKey}
    
    sourceCollection >
    sourceCollection {
        
        # Start with retina as browser pick up the first matching one
        
        # 1920 +
        retina-xl {
            if{
                isTrue = {$plugin.lef_bootstrap_theme.retina.enable}
                value = 1
                equals = {$plugin.lef_bootstrap_theme.enable.xl}
            }
            width.stdWrap{
                cObject < lib.responsiveImages.width
                cObject.10.data = register:width_xl
                prioriCalc = intval
            }
            maxW = < .width
            pixelDensity = {$plugin.lef_bootstrap_theme.retina.pixeldensity}
            # media query params  = min, max, -webkit-min-pixel-density, density
            mediaQuery = {$plugin.lef_bootstrap_theme.viewport.xl},0,{$plugin.lef_bootstrap_theme.retina.mediaquery},{$plugin.lef_bootstrap_theme.retina.pixeldensity}
            dataKey =  retina-xtralarge
        }
        # 1200 +
        retina-lg < .retina-xl
        retina-lg {
            if{
                isTrue = {$plugin.lef_bootstrap_theme.retina.enable}
                value = 1
                equals = {$plugin.lef_bootstrap_theme.enable.lg}
            }
            width.stdWrap.cObject.10.data = register:width_lg
            maxW = < .width
            # media query params  = min, max, -webkit-min-pixel-density, density
            mediaQuery = {$plugin.lef_bootstrap_theme.viewport.lg},{$plugin.lef_bootstrap_theme.viewport.xl},{$plugin.lef_bootstrap_theme.retina.mediaquery},{$plugin.lef_bootstrap_theme.retina.pixeldensity}
            dataKey =  retina-bigger
        }
        # 992 - 1199
        retina-md < .retina-xl
        retina-md {
            if{
                isTrue = {$plugin.lef_bootstrap_theme.retina.enable}
                value = 1
                equals = {$plugin.lef_bootstrap_theme.enable.md}
            }
            width.stdWrap.cObject.10.data = register:width_md
            maxW = < .width  
            mediaQuery = {$plugin.lef_bootstrap_theme.viewport.md},{$plugin.lef_bootstrap_theme.viewport.lg},{$plugin.lef_bootstrap_theme.retina.mediaquery},{$plugin.lef_bootstrap_theme.retina.pixeldensity}
            dataKey =  retina-large
        }
        # 768 - 991
        retina-sm < .retina-xl
        retina-sm {
            if{
                isTrue = {$plugin.lef_bootstrap_theme.retina.enable}
                value = 1
                equals = {$plugin.lef_bootstrap_theme.enable.sm}
            }
            width.stdWrap.cObject{
                10.data = register:width_sm
                override < lib.responsiveImages.srcset
                override {
                    if.isTrue = {$plugin.lef_bootstrap_theme.enable.imageColumnsAdaptive}
                    
                    # width of images in columns could depends on breakpoints and number of columns
                    # inspired by bootstrap_package image rendering
                    
                    10.data = register:width_sm
                    20{
                        30 >
                        30 = CASE
                        30{
                            key{
                                field = imagecols
                                override = default
                                override.if{
                                    value = 1
                                    isGreaterThan.data = register:imageCount
                                    negate = 1
                                }
                            }
                            default = TEXT
                            default.value = 1
                            2 < .default
                            3 < .default
                            3.value = 3
                            4 < .default
                            4.value = 4
                            6 < .default
                            6.value = 6
                            stdWrap.wrap = (|-1)
                        }
                    }
                    40 >
                    40 < .20.30
                    40.stdWrap.wrap = /|
                }
            }
            
            maxW = < .width
            mediaQuery = {$plugin.lef_bootstrap_theme.viewport.sm},{$plugin.lef_bootstrap_theme.viewport.md},{$plugin.lef_bootstrap_theme.retina.mediaquery},{$plugin.lef_bootstrap_theme.retina.pixeldensity}
            dataKey =  retina-medium
        }
        
        # 480 - 767
        retina-xs < .retina-xl
        retina-xs{
            if{
                isTrue = {$plugin.lef_bootstrap_theme.retina.enable}
                value = 1
                equals = {$plugin.lef_bootstrap_theme.enable.xs}
            }
            width.stdWrap.cObject{
                10.data = register:width_xs
                override < lib.responsiveImages.srcset
                override {
                    if.isTrue = {$plugin.lef_bootstrap_theme.enable.imageColumnsAdaptive}
                    
                    # width of images in columns could depends on breakpoints and number of columns
                    # inspired by bootstrap_package image rendering
                    
                    10.data = register:width_xs
                    20{
                        30{
                            4 < .default
                            4.value = 2
                            6 < .default
                            6.value = 3
                        }
                    }
                    40 < .20.30
                    40.stdWrap.wrap = /|
                }
                
            }
            maxW = < .width
            mediaQuery = {$plugin.lef_bootstrap_theme.viewport.xs},{$plugin.lef_bootstrap_theme.viewport.sm},{$plugin.lef_bootstrap_theme.retina.mediaquery},{$plugin.lef_bootstrap_theme.retina.pixeldensity}
            dataKey =  retina-small
        }
        
        # 0 - 479
        retina-xxs < .retina-xl
        retina-xxs {
            if.isTrue = {$plugin.lef_bootstrap_theme.retina.enable}
            width.stdWrap.cObject{
                10{
                    data = register:width_xxs
                    
                    # text beside image dosen t make sense for sutch small device
                    stdWrap >
                }
            }
            maxW = < .width
            mediaQuery = 0,{$plugin.lef_bootstrap_theme.viewport.xs},{$plugin.lef_bootstrap_theme.retina.mediaquery},{$plugin.lef_bootstrap_theme.retina.pixeldensity}
            dataKey =  retina-xsmall
        }
        
        ## base 
        xl < .retina-xl
        xl {
            if.isTrue = 1
            pixelDensity = 1
            mediaQuery = {$plugin.lef_bootstrap_theme.viewport.xl}
            dataKey = xtralarge
        }
        lg < .retina-lg
        lg {
            if.isTrue = 1
            pixelDensity = 1
            mediaQuery = {$plugin.lef_bootstrap_theme.viewport.lg},{$plugin.lef_bootstrap_theme.viewport.xl}
            dataKey = bigger
        }
        
        md < .retina-md
        md {
            if.isTrue = 1
            pixelDensity = 1
            mediaQuery = {$plugin.lef_bootstrap_theme.viewport.md},{$plugin.lef_bootstrap_theme.viewport.lg}
            dataKey = large
        }
        
        sm < .retina-sm
        sm{
            if.isTrue = 1
            pixelDensity = 1
            mediaQuery = {$plugin.lef_bootstrap_theme.viewport.sm},{$plugin.lef_bootstrap_theme.viewport.md}
            dataKey = medium
        }
        
        xs < .retina-xs
        xs{
            if.isTrue = 1
            pixelDensity = 1
            mediaQuery = {$plugin.lef_bootstrap_theme.viewport.xs},{$plugin.lef_bootstrap_theme.viewport.sm}
            dataKey = small
        }
        
        xxs < .retina-xxs
        xxs {
            if.isTrue = 1
            pixelDensity = 1
            mediaQuery = 0,{$plugin.lef_bootstrap_theme.viewport.xs}
            dataKey = xsmall
        }
    }
    
    params >
    params.stdWrap {
        cObject = COA
        cObject{
            # Class params
            10 = COA
            10 {
                10 = COA
                10{
                    10 = TEXT
                    10.value = lazyload
                    20 = TEXT
                    20 {
                        value = preload
                        stdWrap {
                            noTrimWrap = | ||
                            if.isTrue.field = tx_responsiveimages
                        }
                    }
                    stdWrap.if {
                        value  = lazyload 
                        equals = {$styles.content.imgtext.layoutKey}
                    }
                }
                /*
                    # Images frames
                    30 = CASE
                    30{
                    key.field = layout
                    default = TEXT
                    default.value =
                    1 < .default
                    1.value = img-rounded
                    2 < .default
                    2.value = img-circle
                    stdWrap {
                    noTrimWrap = | ||
                    required = 1
                    }
                    }
                */
                stdWrap{
                    noTrimWrap =| class="|"|
                    required = 1
                }
            }
            # Sizes params for srcset
            20  = COA
            20 {
                # xl
                110 < lib.responsiveImages.srcset 
                110{
                    stdWrap.if.isTrue = {$plugin.lef_bootstrap_theme.enable.xl} 
                    10.value = {$plugin.lef_bootstrap_theme.viewport.xl}
                    15.if.IsTrue = 0
                    20.if.isTrue = 0
                    30.10.value =  100*{register:width_xl}/{$plugin.lef_bootstrap_theme.viewport.xl}
                }
                # lg
                120 < lib.responsiveImages.srcset 
                120{
                    stdWrap.if.isTrue = {$plugin.lef_bootstrap_theme.enable.lg} 
                    10.value = {$plugin.lef_bootstrap_theme.viewport.lg}
                    15.if.IsTrue = {$plugin.lef_bootstrap_theme.enable.xl}
                    20.10.value  = {$plugin.lef_bootstrap_theme.viewport.xl} - 1
                    20.if.isTrue = {$plugin.lef_bootstrap_theme.enable.xl}
                    30.10.value =  100*{register:width_lg}/{$plugin.lef_bootstrap_theme.viewport.lg}
                }
                # md
                130 < lib.responsiveImages.srcset 
                130{
                    10.value = {$plugin.lef_bootstrap_theme.viewport.md}
                    15.if.IsTrue = {$plugin.lef_bootstrap_theme.enable.lg}
                    20.10.value = {$plugin.lef_bootstrap_theme.viewport.lg} - 1
                    20.if.isTrue = {$plugin.lef_bootstrap_theme.enable.lg}
                    30.10.value = 100*{register:width_md}/{$plugin.lef_bootstrap_theme.viewport.md}
                }
                # sm
                140 < lib.responsiveImages.srcset
                140{
                    10.value = {$plugin.lef_bootstrap_theme.viewport.sm}
                    15.if.IsTrue = {$plugin.lef_bootstrap_theme.enable.md}
                    20.10.value = {$plugin.lef_bootstrap_theme.viewport.md} - 1
                    20.if.isTrue = {$plugin.lef_bootstrap_theme.enable.md}
                    30.10.value = 100*{register:width_sm}/{$plugin.lef_bootstrap_theme.viewport.sm}
                }
                # xs
                150 < lib.responsiveImages.srcset  
                150{
                    10.value = {$plugin.lef_bootstrap_theme.viewport.xs}
                    15.if.IsTrue = {$plugin.lef_bootstrap_theme.enable.sm}
                    20.10.value = {$plugin.lef_bootstrap_theme.viewport.sm} - 1
                    20.if.isTrue = {$plugin.lef_bootstrap_theme.enable.sm}
                    30.10.value = 100*{register:width_xs}/{$plugin.lef_bootstrap_theme.viewport.sm}
                }
                # xxs
                160 < lib.responsiveImages.srcset  
                160{
                    10 >
                    15.if.isTrue = 0
                    20.10.value = {$plugin.lef_bootstrap_theme.viewport.xs} - 1
                    30.10.value = 100*{register:width_xxs}/{$plugin.lef_bootstrap_theme.viewport.xs}
                    40 >
                }
                
                ### retina (rendering before but defined after)
                # xl
                10 < .110
                10{
                    stdWrap.if.isTrue = {$plugin.lef_bootstrap_theme.retina.enable}
                    25.value = AND ({$plugin.lef_bootstrap_theme.retina.mediaquery}:{$plugin.lef_bootstrap_theme.retina.pixeldensity})
                }
                # lg
                20 < .120
                20{
                    stdWrap.if.isTrue = {$plugin.lef_bootstrap_theme.retina.enable}
                    25.value = AND ({$plugin.lef_bootstrap_theme.retina.mediaquery}:{$plugin.lef_bootstrap_theme.retina.pixeldensity})
                }
                # md
                30 < .130
                30{
                    stdWrap.if.isTrue = {$plugin.lef_bootstrap_theme.retina.enable}
                    25.value = AND ({$plugin.lef_bootstrap_theme.retina.mediaquery}:{$plugin.lef_bootstrap_theme.retina.pixeldensity})
                }
                # sm
                40 < .140
                40{
                    stdWrap.if.isTrue = {$plugin.lef_bootstrap_theme.retina.enable}
                    25.value = AND ({$plugin.lef_bootstrap_theme.retina.mediaquery}:{$plugin.lef_bootstrap_theme.retina.pixeldensity})
                }
                # xs
                50 < .150
                50{
                    stdWrap.if.isTrue = {$plugin.lef_bootstrap_theme.retina.enable}
                    25.value = AND ({$plugin.lef_bootstrap_theme.retina.mediaquery}:{$plugin.lef_bootstrap_theme.retina.pixeldensity})
                }
                # xxs
                60 < .160
                60{
                    stdWrap.if.isTrue = {$plugin.lef_bootstrap_theme.retina.enable}
                    25.value = AND ({$plugin.lef_bootstrap_theme.retina.mediaquery}:{$plugin.lef_bootstrap_theme.retina.pixeldensity})
                }
                
                stdWrap{
                    if{
                        value  = srcset
                        equals = {$styles.content.imgtext.layoutKey}
                    }
                    noTrimWrap = | sizes="|"|
                    required = 1
                }
            }
        }
    }
}